
==================== FINAL INTERFACE ====================
2016-09-19 05:45:42.195321 UTC

interface haskm_FN7qJVrLFifKsZpoVhPQHo:Adaline 7103
  interface hash: 4fef43ec6f47ecb62954a10ddbdc0cf4
  ABI hash: 08df1fba0130c9386bca95a008b95fe1
  export-list hash: 9cbb674498b835efe1c42139e6ce2956
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  Adaline.fitData
  Adaline.fitIter
  Adaline.foo
  Adaline.lineParam
  Adaline.myMean
  Adaline.myStd
  Adaline.txss
  Adaline.txss_s
  Adaline.ys
  Adaline.ActivationFunc
  Adaline.Adaline{Adaline.Adaline}
module dependencies: Lib LinearClassifier
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0 binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hmatrix-0.17.0.2@hmatr_48ekk5lFtSc42AbtSb4jyz integer-gmp-1.0.0.0
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         hmatrix-0.17.0.2@hmatr_48ekk5lFtSc42AbtSb4jyz:Internal.CG
         hmatrix-0.17.0.2@hmatr_48ekk5lFtSc42AbtSb4jyz:Internal.Element
         hmatrix-0.17.0.2@hmatr_48ekk5lFtSc42AbtSb4jyz:Internal.Util
         hmatrix-0.17.0.2@hmatr_48ekk5lFtSc42AbtSb4jyz:Internal.Vector
         hmatrix-0.17.0.2@hmatr_48ekk5lFtSc42AbtSb4jyz:Numeric.Matrix
         hmatrix-0.17.0.2@hmatr_48ekk5lFtSc42AbtSb4jyz:Numeric.Vector
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics base-4.8.2.0:GHC.TypeLits
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         hmatrix-0.17.0.2@hmatr_48ekk5lFtSc42AbtSb4jyz:Internal.Devel
                         hmatrix-0.17.0.2@hmatr_48ekk5lFtSc42AbtSb4jyz:Internal.Matrix
                         hmatrix-0.17.0.2@hmatr_48ekk5lFtSc42AbtSb4jyz:Internal.Modular
                         hmatrix-0.17.0.2@hmatr_48ekk5lFtSc42AbtSb4jyz:Internal.Numeric
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Storable
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Float e532d434ec2447d809887c0fca1d78a5
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  Lib 9abc262bcb5abeb0fb4058b92654c3f4
  exports: 508836428482230b49488db1c9b41019
  boolToNum 75170fd1189f081893452956ff2aad72
  standardize a4f0e49580c3d06a91d627f4fa52c197
  vdot 26d5ce60df6cad685e6823e6ae3abbb5
import  -/  LinearClassifier 0866cb680eda3384c28656811c3da048
  exports: b5c068f7823e0341af3dc7b35d756fc9
  LinearClassifier b3b3b62a720e9b3ce08736b2fe7b4cc2
  fit 3a87537528753e83c23f4d19b3ff9cea
  predict 298f25bef39719c5418abb59e4fa5608
  weights b165453766ba4801df9f242ccf4e5c42
import  -/  hmatrix-0.17.0.2@hmatr_48ekk5lFtSc42AbtSb4jyz:Numeric.LinearAlgebra d7715c5e040abaab6307c87f54ec3f11
2f09e8a343f8ac9142545b01ff3fe874
  $fLinearClassifierAdaline ::
    LinearClassifier.LinearClassifier Adaline.Adaline
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Adaline.Adaline
                  Adaline.$fLinearClassifierAdaline_$cpredict
                  Adaline.fitIter
                  Adaline.$fLinearClassifierAdaline_$cweights -}
2f09e8a343f8ac9142545b01ff3fe874
  $fLinearClassifierAdaline_$cpredict ::
    Adaline.Adaline -> [GHC.Types.Double] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(LS),1*U(A,U)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Adaline.Adaline w1 :: [GHC.Types.Double] ->
                 case w of ww { Adaline.Adaline ww1 ww2 ->
                 Adaline.$w$cpredict ww2 w1 }) -}
2f09e8a343f8ac9142545b01ff3fe874
  $fLinearClassifierAdaline_$cweights ::
    Adaline.Adaline -> [GHC.Types.Double]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Adaline.Adaline ->
                 case ds of wild { Adaline.Adaline ds1 ws -> ws }) -}
2f09e8a343f8ac9142545b01ff3fe874
  $fShowAdaline :: GHC.Show.Show Adaline.Adaline
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Adaline.Adaline
                  Adaline.$fShowAdaline_$cshowsPrec
                  Adaline.$fShowAdaline_$cshow
                  Adaline.$fShowAdaline_$cshowList -}
2f09e8a343f8ac9142545b01ff3fe874
  $fShowAdaline1 :: Adaline.Adaline -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Adaline.Adaline ->
                 case w of ww { Adaline.Adaline ww1 ww2 ->
                 Adaline.$w$cshowsPrec 0 ww1 ww2 }) -}
d8f46f1132f2b21ec7892d0232587a7d
  $fShowAdaline2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adaline "#) -}
05789097dca298b6ce627ccd39518dfc
  $fShowAdaline3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11) -}
2f09e8a343f8ac9142545b01ff3fe874
  $fShowAdaline_$cshow :: Adaline.Adaline -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Adaline.Adaline ->
                 case w of ww { Adaline.Adaline ww1 ww2 ->
                 Adaline.$w$cshow ww1 ww2 }) -}
2f09e8a343f8ac9142545b01ff3fe874
  $fShowAdaline_$cshowList :: [Adaline.Adaline] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Adaline.Adaline
                   Adaline.$fShowAdaline1) -}
2f09e8a343f8ac9142545b01ff3fe874
  $fShowAdaline_$cshowsPrec ::
    GHC.Types.Int -> Adaline.Adaline -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U(U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Adaline.Adaline ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Adaline.Adaline ww3 ww4 ->
                 Adaline.$w$cshowsPrec ww1 ww3 ww4 } }) -}
994ada17ec8b36d0c43d8fe6f939fe41
  $w$cpredict ::
    [GHC.Types.Double] -> [GHC.Types.Double] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: [GHC.Types.Double] w :: [GHC.Types.Double] ->
                 case Lib.$wgo1
                        (GHC.List.tail @ GHC.Types.Double ww)
                        w
                        0.0 of ww1 { DEFAULT ->
                 case ww of wild {
                   [] -> case GHC.List.badHead ret_ty GHC.Types.Bool of {}
                   : x ds1
                   -> case x of wild1 { GHC.Types.D# y ->
                      GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>## (GHC.Prim.+## ww1 y) 0.0) } } }) -}
3d4017117265593810d5652f480664bb
  $w$cshow ::
    GHC.Types.Double -> [GHC.Types.Double] -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Types.Double ww1 :: [GHC.Types.Double] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Adaline.$fShowAdaline2
                   (case ww of ww2 { GHC.Types.D# ww3 ->
                    GHC.Float.$w$sshowSignedFloat
                      GHC.Float.$fShowDouble_$sshowFloat
                      Adaline.$fShowAdaline3
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (GHC.Show.showList__
                            @ GHC.Types.Double
                            GHC.Float.$fShowDouble1
                            ww1
                            (GHC.Types.[] @ GHC.Types.Char))) })) -}
aca038e9c3987aa243ca83f150f04cae
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Double -> [GHC.Types.Double] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Types.Double
                   ww2 :: [GHC.Types.Double] ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { GHC.Types.D# ww4 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Adaline.$fShowAdaline3
                       ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Adaline.$fShowAdaline2
                       (f (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (GHC.Show.showList__
                                @ GHC.Types.Double
                                GHC.Float.$fShowDouble1
                                ww2
                                x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
5ff339d43f4a2b87868cda761b7ef7e7
  $wfitData ::
    ([[GHC.Types.Double]], [GHC.Types.Bool])
    -> GHC.Types.Double
    -> [GHC.Types.Double]
    -> (# GHC.Types.Double, [GHC.Types.Double] #)
  {- Arity: 3, Strictness: <L,U(1*U,1*U)><L,U(U)><L,U>, Inline: [0],
     Unfolding: (\ w :: ([[GHC.Types.Double]], [GHC.Types.Bool])
                   ww :: GHC.Types.Double
                   ww1 :: [GHC.Types.Double] ->
                 (# ww,
                    let {
                      xss :: [[GHC.Types.Double]]
                      = case w of wild { (,) xss1 ybs -> xss1 }
                    } in
                    let {
                      errors :: [GHC.Types.Double]
                      = case w of wild { (,) xss1 ybs ->
                        Adaline.fitData_go
                          ybs
                          (GHC.Base.map
                             @ [GHC.Types.Double]
                             @ GHC.Types.Double
                             (\ xs :: [GHC.Types.Double] ->
                              case Lib.$wgo1
                                     (GHC.List.tail @ GHC.Types.Double ww1)
                                     xs
                                     0.0 of ww2 { DEFAULT ->
                              case ww1 of wild1 {
                                [] -> case GHC.List.badHead ret_ty GHC.Types.Double of {}
                                : x ds1
                                -> case x of wild2 { GHC.Types.D# y ->
                                   GHC.Types.D# (GHC.Prim.+## ww2 y) } } })
                             xss) }
                    } in
                    GHC.List.zipWith
                      @ GHC.Types.Double
                      @ GHC.Types.Double
                      @ GHC.Types.Double
                      GHC.Float.plusDouble
                      (GHC.Types.:
                         @ GHC.Types.Double
                         (case ww of wild { GHC.Types.D# x ->
                          case Adaline.$wgo errors 0.0 of ww2 { DEFAULT ->
                          GHC.Types.D# (GHC.Prim.*## x ww2) } })
                         (GHC.List.zipWith
                            @ GHC.Types.Double
                            @ [GHC.Types.Double]
                            @ GHC.Types.Double
                            (\ m :: GHC.Types.Double ls :: [GHC.Types.Double][OneShot] ->
                             let {
                               ds :: GHC.Types.Double
                               = case ww of wild { GHC.Types.D# x ->
                                 case m of wild1 { GHC.Types.D# y ->
                                 GHC.Types.D# (GHC.Prim.*## x y) } }
                             } in
                             letrec {
                               $wgo1 :: [GHC.Types.Double] -> GHC.Prim.Double# -> GHC.Prim.Double#
                                 {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
                               = \ w1 :: [GHC.Types.Double] ww2 :: GHC.Prim.Double# ->
                                 case w1 of wild {
                                   [] -> ww2
                                   : y ys5
                                   -> case ds of wild1 { GHC.Types.D# x ->
                                      case y of wild2 { GHC.Types.D# y1 ->
                                      $wgo1 ys5 (GHC.Prim.+## ww2 (GHC.Prim.*## x y1)) } } }
                             } in
                             case $wgo1 ls 0.0 of ww2 { DEFAULT -> GHC.Types.D# ww2 })
                            errors
                            (Data.OldList.transpose @ GHC.Types.Double xss)))
                      ww1 #)) -}
c16565d7162eaf10c716f9daecbb13ed
  $wfitIter ::
    GHC.Prim.Int#
    -> ([[GHC.Types.Double]], [GHC.Types.Bool])
    -> GHC.Types.Double
    -> [GHC.Types.Double]
    -> (# GHC.Types.Double, [GHC.Types.Double] #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U,U)><L,U(U)><L,U>,
     Inline: [0] -}
2f4d142a401beb0016b6a634174119d7
  $wgo :: [GHC.Types.Double] -> GHC.Prim.Double# -> GHC.Prim.Double#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
5e8b195fb34ab594ab6f5d0b4acfd0d6
  $wlineParam ::
    [GHC.Types.Double] -> (# GHC.Types.Double, [GHC.Types.Double] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ ww :: [GHC.Types.Double] ->
                 case ww of wild {
                   []
                   -> case Adaline.lineParam1
                      ret_ty (# GHC.Types.Double, [GHC.Types.Double] #)
                      of {}
                   : p ds
                   -> case ds of wild1 {
                        []
                        -> case Adaline.lineParam1
                           ret_ty (# GHC.Types.Double, [GHC.Types.Double] #)
                           of {}
                        : q ds1
                        -> case ds1 of wild2 {
                             []
                             -> case Adaline.lineParam1
                                ret_ty (# GHC.Types.Double, [GHC.Types.Double] #)
                                of {}
                             : r ds2
                             -> case ds2 of wild3 {
                                  []
                                  -> (# case q of wild4 { GHC.Types.D# x ->
                                        case r of wild5 { GHC.Types.D# y ->
                                        case GHC.Prim./## x y of wild6 { DEFAULT ->
                                        GHC.Types.D# (GHC.Prim.negateDouble# wild6) } } },
                                        GHC.Types.:
                                          @ GHC.Types.Double
                                          (case p of wild4 { GHC.Types.D# x ->
                                           case r of wild5 { GHC.Types.D# y ->
                                           case GHC.Prim./## x y of wild6 { DEFAULT ->
                                           GHC.Types.D# (GHC.Prim.negateDouble# wild6) } } })
                                          (GHC.Types.[] @ GHC.Types.Double) #)
                                  : ipv ipv1
                                  -> case Adaline.lineParam1
                                     ret_ty (# GHC.Types.Double, [GHC.Types.Double] #)
                                     of {} } } } }) -}
c835ad1f9c8f095b28329b56cc37358d
  type ActivationFunc = GHC.Types.Double -> GHC.Types.Double
2f09e8a343f8ac9142545b01ff3fe874
  data Adaline = Adaline GHC.Types.Double [GHC.Types.Double]
4ec477fe7b48d27618f7e2cfc70e0496
  fitData ::
    ([[GHC.Types.Double]], [GHC.Types.Bool])
    -> Adaline.Adaline -> Adaline.Adaline
  {- Arity: 2, Strictness: <L,U(1*U,1*U)><S,1*U(U(U),U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: ([[GHC.Types.Double]], [GHC.Types.Bool])
                   w1 :: Adaline.Adaline ->
                 case w1 of ww { Adaline.Adaline ww1 ww2 ->
                 case Adaline.$wfitData w ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 Adaline.Adaline ww4 ww5 } }) -}
eb57e04d7c7729bf2942bf68bdec0cfc
  fitData_go ::
    [GHC.Types.Bool] -> [GHC.Types.Double] -> [GHC.Types.Double]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
2f09e8a343f8ac9142545b01ff3fe874
  fitIter ::
    GHC.Types.Int
    -> ([[GHC.Types.Double]], [GHC.Types.Bool])
    -> Adaline.Adaline
    -> Adaline.Adaline
  {- Arity: 3, Strictness: <S(S),1*U(1*U)><L,U(U,U)><S,1*U(U(U),U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: ([[GHC.Types.Double]], [GHC.Types.Bool])
                   w2 :: Adaline.Adaline ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Adaline.Adaline ww3 ww4 ->
                 case Adaline.$wfitIter ww1 w1 ww3 ww4 of ww5 { (#,#) ww6 ww7 ->
                 Adaline.Adaline ww6 ww7 } } }) -}
eb467637d1bf682f122de65bae6e15c3
  foo :: [([GHC.Types.Double], GHC.Types.Bool)]
  {- Unfolding: (GHC.List.zip
                   @ [GHC.Types.Double]
                   @ GHC.Types.Bool
                   Adaline.txss
                   Adaline.ys) -}
4278b3cf270f25ae8495f6ecd5c65cb6
  lineParam :: Adaline.Adaline -> [GHC.Types.Double]
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Adaline.Adaline ->
                 case w of ww { Adaline.Adaline ww1 ww2 ->
                 case Adaline.$wlineParam ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Types.: @ GHC.Types.Double ww4 ww5 } }) -}
887f623238cef81770a3908fbf03ad0e
  lineParam1 :: [GHC.Types.Double]
  {- Strictness: b -}
e3c827e4164ad138e9b86b8c529ff74e
  myMean ::
    (GHC.Real.Fractional a, Data.Foldable.Foldable t) => t a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))LL),U(1*U,1*C1(C1(U)),A,A)><L,U(A,A,A,A,A,A,A,A,A,A,1*C1(U(U)),A,A,A,1*C1(C1(U)),A)><L,U>,
     Unfolding: (\ @ (t :: * -> *)
                   @ a
                   $dFractional :: GHC.Real.Fractional a
                   $dFoldable :: Data.Foldable.Foldable t
                   eta :: t a ->
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 GHC.Real./
                   @ a
                   $dFractional
                   (Data.Foldable.sum @ t $dFoldable @ a $dNum eta)
                   (GHC.Num.fromInteger
                      @ a
                      $dNum
                      (case Data.Foldable.length
                              @ t
                              $dFoldable
                              @ a
                              eta of wild { GHC.Types.I# i ->
                       GHC.Integer.Type.smallInteger i }))) -}
e5046f8dc3de409624b15ce328475c94
  myStd :: GHC.Float.Floating c => [c] -> c
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLC(S)LLLLLLLLLLLLLL),U(1*U,A,A,A,1*C1(U),C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U> -}
5ad43d6ab13db092c6ff0fbb0311c158
  txss :: [[GHC.Types.Double]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Double]
                   Adaline.txss17
                   Adaline.txss1) -}
5100e0cdee0d9e6ad0973f9e8dfa6145
  txss1 :: [[GHC.Types.Double]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Double]
                   Adaline.txss16
                   Adaline.txss2) -}
be09c9e96434227c4881860f53f6bd15
  txss10 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Adaline.txss11
                   (GHC.Types.[] @ GHC.Types.Double)) -}
62fed1ecc3d23539b15df3a96eee7f2f
  txss11 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# -8.0) -}
aeb60122997269a9c3a13f6e44c19c64
  txss12 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Adaline.txss15
                   Adaline.txss13) -}
257f589f703be53a7b6d34bdb33494fb
  txss13 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Adaline.txss14
                   (GHC.Types.[] @ GHC.Types.Double)) -}
e841549880ab9ecaf72136abe2799ed9
  txss14 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 4.0) -}
de31b5f39bfbe6abd12b04fac38ae488
  txss15 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 1.0) -}
7d86d998bb867f268517efbdf568c63e
  txss16 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Adaline.txss7
                   Adaline.txss6) -}
102e71323d73e12b252c8f2f893e9021
  txss17 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Adaline.txss15
                   Adaline.txss18) -}
0d8aa65f546bd6f9d28fe4859433ba8a
  txss18 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Adaline.txss15
                   (GHC.Types.[] @ GHC.Types.Double)) -}
70a6f58a72a6d1c603c19675b881956f
  txss2 :: [[GHC.Types.Double]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Double]
                   Adaline.txss12
                   Adaline.txss3) -}
8777f7899662d5cd1c3586761891fa5d
  txss3 :: [[GHC.Types.Double]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Double]
                   Adaline.txss9
                   Adaline.txss4) -}
5c006ba0ddf65295e0a0cdd91347844a
  txss4 :: [[GHC.Types.Double]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Double]
                   Adaline.txss5
                   (GHC.Types.[] @ [GHC.Types.Double])) -}
2c64418af804f5a916a4e5f32881b609
  txss5 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Adaline.txss8
                   Adaline.txss6) -}
46a36e6719b0edb6018d36879ffa55e6
  txss6 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Adaline.txss7
                   (GHC.Types.[] @ GHC.Types.Double)) -}
ecd4fe53fa2dd6be66e2756a62c022c3
  txss7 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# -1.0) -}
c538a15d809e3bebc56b6fddfbd7776d
  txss8 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# -2.0) -}
d6499c7e3173ca4c228dea0e59aea4f4
  txss9 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Adaline.txss8
                   Adaline.txss10) -}
17bd8adcc7ca4ebf036ef01bc5e0d5d7
  txss_s :: [[GHC.Types.Double]]
  {- Unfolding: (Data.OldList.transpose
                   @ GHC.Types.Double
                   Adaline.txss_s1) -}
d213316878d12ce5f70769b06aafdce6
  txss_s1 :: [[GHC.Types.Double]]
  {- Unfolding: (GHC.Base.map
                   @ [GHC.Types.Double]
                   @ [GHC.Types.Double]
                   Lib.standardize
                   Adaline.txss_s2) -}
2448c97cfce371ad8fe354c7616a5bef
  txss_s2 :: [[GHC.Types.Double]]
  {- Unfolding: (Data.OldList.transpose_$stranspose
                   @ GHC.Types.Double
                   Adaline.txss17
                   Adaline.txss1) -}
cc3e82cbd5dc08803b1dd5fd158fff0a
  ys :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.True
                   Adaline.ys1) -}
eea91e6af707fd0f8960a7fe3a05fd61
  ys1 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.False
                   Adaline.ys2) -}
036afc4d59fd7bdefe89a33b5a956e75
  ys2 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.True
                   Adaline.ys3) -}
dedf22db572d79c78d2824d34d9850bb
  ys3 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.False
                   Adaline.ys4) -}
c20d5b7279744025a2bbe13a03567e48
  ys4 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.False
                   (GHC.Types.[] @ GHC.Types.Bool)) -}
instance LinearClassifier.LinearClassifier [Adaline.Adaline]
  = Adaline.$fLinearClassifierAdaline
instance GHC.Show.Show [Adaline.Adaline] = Adaline.$fShowAdaline
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

